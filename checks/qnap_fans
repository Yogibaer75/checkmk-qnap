#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2010             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Author: Andre Eckstein <Andre.Eckstein@Bechtle.com>
# updated by Christian Burmeister 10/2015
# updated by Michael Kronika 04/2020
factory_settings["qnap_fans_default_levels"] = {
    "levels": (6000, 6500)
}

def inventory_qnap_fans(info):
    return [(x[1], None) for x in info]

def check_qnap_fans(item, params, info):
    if type(params.get('levels')) is tuple:
        warn, crit = params.get('levels', (0, 0))
    else:
        # old config
        warn, crit = params["levels"]

    for fid, desc, rpm in info:
        if desc == item:
            rpm = rpm.rstrip("RPM ")
            rpm = int(rpm)
            perfdata = [("rpm", rpm, warn, crit)]
            infotxt = " - %d RPM (levels at %d/%d)" % (rpm, warn, crit)
            if rpm >= crit:
                    return (2, "CRIT" + infotxt, perfdata)
            elif rpm >= warn:
                    return (1, "WARN" + infotxt, perfdata)
            else:
                    return (0, "OK" + infotxt, perfdata)

    #return (3, "UNKNOWN - No SNMP Output from agent")

check_info['qnap_fans'] = {
    "check_function"          : check_qnap_fans,
    "inventory_function"      : inventory_qnap_fans,
    "group"                   : "qnap_fans",
    "default_levels_variable" : "qnap_fans_default_levels",
    "service_description"     : "QNAP %s",
    "has_perfdata"            : True,
    "snmp_info"               : ( ".1.3.6.1.4.1.24681.1.2.15.1", [
                                   1, # ID
                                   2, # Description
                                   3, # FanSpeed
                                ] ),
    "snmp_scan_function"      : lambda oid: "QNAP Systems" in oid('.1.3.6.1.2.1.47.1.1.1.1.12.1')
}
